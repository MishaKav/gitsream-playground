# Code generated by gitStream GitHub app - DO NOT EDIT

name: gitStream workflow automation
run-name: |
  /:\ gitStream: PR #${{ fromJSON(fromJSON(github.event.inputs.client_payload)).pullRequestNumber }}

on:
  workflow_dispatch:
    inputs:
      client_payload:
        description: The Client payload
        required: true
      full_repository:
        description: the repository name include the owner in `owner/repo_name` format
        required: true
      head_ref:
        description: the head sha
        required: true
      base_ref:
        description: the base ref
        required: true
      installation_id:
        description: the installation id
        required: false
      resolver_url:
        description: the resolver url to pass results to
        required: true
      resolver_token:
        description: Optional resolver token for resolver service
        required: false
        default: ''

jobs:
  gitStream:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    name: gitStream workflow automation
    steps:
      - name: Create GitStream folder
        run: |
          rm -rf gitstream
          mkdir gitstream
          cd gitstream
          mkdir repo

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.full_repository }}
          ref: ${{ github.event.inputs.base_ref }}
          path: 'gitstream/repo/'
          token: ${{ fromJSON(fromJSON(github.event.inputs.client_payload)).githubToken || github.token }}

      - name: Escape single quotes
        id: safe-strings
        uses: actions/github-script@v7
        env:
          BASE_REF_ARG: ${{ github.event.inputs.base_ref }}
          HEAD_REF_ARG: ${{ github.event.inputs.head_ref }}
          PAYLOAD_ARG: ${{ github.event.inputs.client_payload }}
          URL_ARG: ${{ fromJSON(fromJSON(github.event.inputs.client_payload)).headHttpUrl || fromJSON(fromJSON(github.event.inputs.client_payload)).repoUrl }}
        with:
          script: |
            try {
              function convertToSafeString(input) {
                return (input || '').replace(/['`]/g, "\\$&");
              };
              function escapeApostrophe(input) {
                return (input || '').replace(/'/g, "\\'");
              };
              const base_ref = escapeApostrophe(process.env.BASE_REF_ARG);
              const head_ref = escapeApostrophe(process.env.HEAD_REF_ARG);
              const url = convertToSafeString(process.env.URL_ARG);
              const client_payload = convertToSafeString(process.env.PAYLOAD_ARG);
              core.setOutput('base_ref', base_ref);
              core.setOutput('head_ref', head_ref);
              core.setOutput('url', url);
              core.setOutput('client_payload', client_payload);
            } catch (err) {
              core.error(`Failed producing safe string: ${err}`);
              process.exit(1);
            }

      - name: Checkout Pull Request branches history
        run: |
          all=2147483647
          cd gitstream
          cd repo
          git fetch --deepen=$all origin $'${{ steps.safe-strings.outputs.base_ref }}'
          git remote add upstream $'${{ steps.safe-strings.outputs.url }}'
          git fetch --deepen=$all upstream $'${{ steps.safe-strings.outputs.head_ref }}'
          git checkout -b $'upstream/${{ steps.safe-strings.outputs.head_ref}}' $'upstream/${{ steps.safe-strings.outputs.head_ref}}'
          git checkout $'${{ steps.safe-strings.outputs.base_ref }}'
          git checkout $'${{ steps.safe-strings.outputs.head_ref }}'

      - name: Create cm folder
        run: |
          cd gitstream
          mkdir cm

      - name: Checkout cm repo
        uses: actions/checkout@v4
        if: ${{ fromJSON(fromJSON(github.event.inputs.client_payload)).hasCmRepo == true }}
        with:
          repository: '${{ fromJSON(fromJSON(github.event.inputs.client_payload)).owner }}/${{ fromJSON(fromJSON(github.event.inputs.client_payload)).cmRepo }}'
          ref: ${{ fromJSON(fromJSON(github.event.inputs.client_payload)).cmRepoRef }}
          path: 'gitstream/cm/'

      - name: Volume folder
        run: |
          mv gitstream code

      - name: Init JFrog
        run: |
          curl -H "X-JFrog-Art-API: ${{ secrets.ARTIFACTORY_API_KEY }}" https://linearb.jfrog.io/linearb/api/npm/npm-local/auth/linearb >> .npmrc

      - name: NPM Cache
        id: npm-cache
        uses: actions/cache@v4
        with:
          save-always: true
          path: '**/node_modules'
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm

      - name: Install Dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run RulesEngine
        uses: actions/github-script@v7
        env:
          HEAD_REF: ${{ steps.safe-strings.outputs.head_ref }}
          BASE_REF: ${{ steps.safe-strings.outputs.base_ref }}
          CLIENT_PAYLOAD: ${{ steps.safe-strings.outputs.client_payload }}
          RULES_RESOLVER_URL: ${{ github.event.inputs.resolver_url }}
          RULES_RESOLVER_TOKEN: ${{ github.event.inputs.resolver_token }}
          DEBUG_MODE: false
        with:
          script: |
            const { RulesEngine, executeGitCommand } = require('@linearb/gitstream-core');
            const { execSync } = require('child_process');

            try {
              await RulesEngine().run();
            } catch (err) {
              core.error(`Failed run RulesEngine: ${err}`);
              process.exit(1);
            }
